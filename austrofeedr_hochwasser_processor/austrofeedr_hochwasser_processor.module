<?php

// Drupal needs this blank file.

/**
 * Implements hook_rules_action_info().
 */
function austrofeedr_hochwasser_processor_rules_action_info() {
  return array(
    'hw_wasserstand_update' => array(
      'base' => 'hw_wasserstand_update_action',
      'label' => t('Hochwasser Wasserstand update status'),
      'group' => t('AustroFeedr'),
      'parameter' => array(
        'pegelaktuell_item' => array('type' => 'wsclient_hw_pegelaktuell_ehyd_service_pegelaktuell', 'label' => t('Pegelaktuell item')),
        'messstelle' => array('type' => 'node', 'label' => t('Messstelle')),
      ),
      'provides' => array(
        'hw_status_term' => array('type' => 'taxonomy_term', 'label' => t('Hochwasser status term')),
      ),
    ),
    'hw_wasserstand_update_trend' => array(
      'base' => 'hw_wasserstand_update_trend_action',
      'label' => t('Hochwasser Wasserstand update trend'),
      'group' => t('AustroFeedr'),
      'parameter' => array(
        'pegelaktuell_item' => array('type' => 'wsclient_hw_pegelaktuell_ehyd_service_pegelaktuell', 'label' => t('Pegelaktuell item')),
        'messstelle' => array('type' => 'node', 'label' => t('Messstelle')),
      ),
      'provides' => array(
        'hw_trend_term' => array('type' => 'taxonomy_term', 'label' => t('Hochwasser trend term')),
      ),
    ),
  );
}

/**
 * Rules action for Hochwasser Wasserstand update status.
 */
function hw_wasserstand_update_action($pegelaktuell_item, $messstelle) {
  // Require all necessary fields to be set.
  if(!(isset($pegelaktuell_item['wert'])
   && isset($messstelle->field_hw_wert_mq['und'])
   && isset($messstelle->field_hw_wert_mjnq['und'])
   && isset($messstelle->field_hw_wert_hq1['und'])
   && isset($messstelle->field_hw_wert_hq10['und'])
   && isset($messstelle->field_hw_wert_hq30['und']))) {
    return array();
  }

  // Extract necessary fields.
  $wert = $pegelaktuell_item['wert'];
  $mq   = $messstelle->field_hw_wert_mq['und'][0]['value'];
  $mjnq = $messstelle->field_hw_wert_mjnq['und'][0]['value'];
  $hq1  = $messstelle->field_hw_wert_hq1['und'][0]['value'];
  $hq10 = $messstelle->field_hw_wert_hq10['und'][0]['value'];
  $hq30 = $messstelle->field_hw_wert_hq30['und'][0]['value'];

  // Hochwasserstand interpretation.
  if($wert > $hq30) {
    $status = 'Hochwasserstufe 3';
  }
  else if($wert > $hq10) {
    $status = 'Hochwasserstufe 2';
  }
  else if($wert > $hq1) {
    $status = 'Hochwasserstufe 1';
  }
  else if($wert > ($hq1 + $mq) / 2) {
    $status = 'erhöhte Wasserführung';
  }
  else if($wert > ($mq + $mjnq) / 2) {
    $status = 'Mittelwasser';
  }
  else{
    $status = 'Niederwasser';
  }

  // Map status to taxonomy term and return.
  $terms = (taxonomy_get_term_by_name(t($status)));
  $status_term = array_shift($terms);
  return array('hw_status_term' => $status_term->tid);
}

/**
 * Rules action for Hochwasser Wasserstand update trend.
 */
function hw_wasserstand_update_trend_action($pegelaktuell_item, $messstelle) {
  // Require all necessary fields to be set.
  if(!(isset($pegelaktuell_item['wert'])
   && isset($messstelle->field_hw_werte['und']))) {
    return array();
  }

  dpm($messstelle->field_hw_werte['und']);

  // Extract necessary fields.
  $wert = $pegelaktuell_item['wert'];
  $old = $messstelle->field_hw_werte['und'][0]['value'];

  // Hochwasserstand interpretation.
  if($wert > $old) {
    $status = 'steigend';
  }
  else if($wert == $old) {
    $status = 'gleichbleibend';
  }
  else {
    $status = 'fallend';
  }

  // Map status to taxonomy term and return.
  $terms = (taxonomy_get_term_by_name(t($trend)));
  $status_term = array_shift($terms);
  return array('hw_trend_term' => $status_term->tid);
}